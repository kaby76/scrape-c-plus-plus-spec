
// Defs from "addin2".

WS : [\n\r\t ]+ -> channel(HIDDEN);
//Newline: [\n\r];
COMMENT : '//' ~[\n\r]* -> channel(HIDDEN);
ML_COMMENT : '/*' .*? '*/' -> channel(HIDDEN);
Prep : '#' ~[\n\r]* -> channel(HIDDEN);

mode PP;

PPCOMMENT : '//' ~[\n\r]* -> channel(HIDDEN);
PPML_COMMENT : '/*' .*? '*/' -> channel(HIDDEN);
PPKWAnd: 'and' -> type(KWAnd);
PPKWAndEq: 'and_eq' -> type(KWAndEq);
PPKWBitAnd: 'bitand' -> type(KWBitAnd);
PPKWBitOr: 'bitor' -> type(KWBitOr);
PPKWCompl: 'compl' -> type(KWCompl);
PPKWDefine: 'define' -> type(KWDefine);
PPKWDefined: 'defined' -> type(KWDefined);
PPKWDelete: 'delete' -> type(KWDelete);
PPKWElif: 'elif' -> type(KWElif);
PPKWElse: 'else' -> type(KWElse);
PPKWEndif: 'endif' -> type(KWEndif);
PPKWError: 'error' -> type(KWError);
PPKWWarning: 'warning' -> type(KWWarning);
PPKWFalse: 'false' -> type(KWFalse_);
PPKWTrue: 'true' -> type(KWTrue_);
PPKWIf: 'if' -> type(KWIf);
PPKWIfdef: 'ifdef' -> type(KWIfdef);
PPKWIfndef: 'ifndef' -> type(KWIfndef);
PPKWInclude: 'include' -> type(KWInclude);
PPKWLine: 'line' -> type(KWLine);
PPKWNew: 'new' -> type(KWNew);
PPKWNot: 'not' -> type(KWNot);
PPKWNotEq: 'not_eq' -> type(KWNotEq);
PPKWOr: 'or' -> type(KWOr);
PPKWOrEq: 'or_eq' -> type(KWOrEq);
PPKWPragma: 'pragma' -> type(KWPragma);
PPKWUndef: 'undef' -> type(KWUndef);
PPKWXor: 'xor' -> type(KWXor);
PPKWXorEq: 'xor_eq' -> type(KWXorEq);
Pp_number : (  FDigit |  '.' FDigit ) ( FDigit | FIdentifier_nondigit | '\'' FDigit | '\'' FNondigit | 'e' FSign | 'E' FSign | '.' ) * -> type(Floating_literal) ;
Header_name : FHeader_name -> type(String_literal);
PPEOL: [\r\n]+ -> type(Newline);
PPWS : [\t ]+ -> channel(HIDDEN);
PPIdentifier : (  FIdentifier_nondigit ) ( FIdentifier_nondigit | FDigit ) * -> type(Identifier);
PPLeftBrace: '{' -> type(LeftBrace);
PPRightBrace: '}' -> type(RightBrace);
PPLeftBracket: '[' -> type(LeftBracket);
PPRightBracket: ']' -> type(RightBracket);
PPPoundPound: '##' -> type(PoundPound);
PPLeftParen: '(' -> type(LeftParen);
PPRightParen: ')' -> type(RightParen);
PPLtColon: '<:' -> type(LtColon);
PPColonGt: ':>' -> type(ColonGt);
PPLtPer: '<%' -> type(LtPer);
PPPerGt: '%>' -> type(PerGt);
PPPerColon: '%:' -> type(PerColon);
PPPerColonPerColon: '%:%:' -> type(PerColonPerColon);
PPSemi: ';' -> type(Semi);
PPColon: ':' -> type(Colon);
PPEllipsis: '...' -> type(Ellipsis);
PPPound: '#' -> type(Pound);
PPQuestion: '?' -> type(Question);
PPDoublecolon: '::' -> type(Doublecolon);
PPDot: '.' -> type(Dot);
PPDotStar: '.*' -> type(DotStar);
PPPlus: '+' -> type(Plus);
PPMinus: '-' -> type(Minus);
PPAssign: '=' -> type(Assign);
PPStar: '*' -> type(Star);
PPLess: '<' -> type(Less);
PPDiv: '/' -> type(Div);
PPGreater: '>' -> type(Greater);
PPMod: '%' -> type(Mod);
PPPlusAssign: '+=' -> type(PlusAssign);
PPTilde: '~' -> type(Tilde);
PPNot: '!' -> type(Not);
PPCaret: '^' -> type(Caret);
PPMinusAssign: '-=' -> type(MinusAssign);
PPAnd: '&' -> type(And);
PPStarAssign: '*=' -> type(StarAssign);
PPOr: '|' -> type(Or);
PPDivAssign: '/=' -> type(DivAssign);
PPModAssign: '%=' -> type(ModAssign);
PPXorAssign: '^=' -> type(XorAssign);
PPAndAssign: '&=' -> type(AndAssign);
PPOrAssign: '|=' -> type(OrAssign);
PPLeftShift: '<<' -> type(LeftShift);
//PPRightShift: '>>' -> type(RightShift);
PPRightShiftAssign: '>>=' -> type(RightShiftAssign);
PPLeftShiftAssign: '<<=' -> type(LeftShiftAssign);
PPEqual: '==' -> type(Equal);
PPLessEqual: '<=' -> type(LessEqual);
PPGreaterEqual: '>=' -> type(GreaterEqual);
PPAndAnd: '&&' -> type(AndAnd);
PPOrOr: '||' -> type(OrOr);
PPPlusPlus: '++' -> type(PlusPlus);
PPMinusMinus: '--' -> type(MinusMinus);
PPComma: ',' -> type(Comma);
PPArrow: '->' -> type(Arrow);
PPArrowStar: '->*' -> type(ArrowStar);
PPNotEqual: '!=' -> type(NotEqual);
PPContinue : [\\][\r\n]+ -> channel(HIDDEN);
PPString_literal : ( FEncoding_prefix ? '"' FS_char_sequence ? '"' | FEncoding_prefix ? 'R' FRaw_string ) -> type(String_literal) ;
PPCharacter_literal :  ( FEncoding_prefix ? '\'' FC_char_sequence '\'' ) -> type(Character_literal) ;
PPAny : .;
